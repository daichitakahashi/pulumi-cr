// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cr

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"internal"
)

var _ = internal.GetEnvOrDefault

type AnalyticsEngineBinding struct {
	Dataset string `pulumi:"dataset"`
	Name    string `pulumi:"name"`
}

// AnalyticsEngineBindingInput is an input type that accepts AnalyticsEngineBindingArgs and AnalyticsEngineBindingOutput values.
// You can construct a concrete instance of `AnalyticsEngineBindingInput` via:
//
//	AnalyticsEngineBindingArgs{...}
type AnalyticsEngineBindingInput interface {
	pulumi.Input

	ToAnalyticsEngineBindingOutput() AnalyticsEngineBindingOutput
	ToAnalyticsEngineBindingOutputWithContext(context.Context) AnalyticsEngineBindingOutput
}

type AnalyticsEngineBindingArgs struct {
	Dataset pulumi.StringInput `pulumi:"dataset"`
	Name    pulumi.StringInput `pulumi:"name"`
}

func (AnalyticsEngineBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsEngineBinding)(nil)).Elem()
}

func (i AnalyticsEngineBindingArgs) ToAnalyticsEngineBindingOutput() AnalyticsEngineBindingOutput {
	return i.ToAnalyticsEngineBindingOutputWithContext(context.Background())
}

func (i AnalyticsEngineBindingArgs) ToAnalyticsEngineBindingOutputWithContext(ctx context.Context) AnalyticsEngineBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsEngineBindingOutput)
}

// AnalyticsEngineBindingArrayInput is an input type that accepts AnalyticsEngineBindingArray and AnalyticsEngineBindingArrayOutput values.
// You can construct a concrete instance of `AnalyticsEngineBindingArrayInput` via:
//
//	AnalyticsEngineBindingArray{ AnalyticsEngineBindingArgs{...} }
type AnalyticsEngineBindingArrayInput interface {
	pulumi.Input

	ToAnalyticsEngineBindingArrayOutput() AnalyticsEngineBindingArrayOutput
	ToAnalyticsEngineBindingArrayOutputWithContext(context.Context) AnalyticsEngineBindingArrayOutput
}

type AnalyticsEngineBindingArray []AnalyticsEngineBindingInput

func (AnalyticsEngineBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnalyticsEngineBinding)(nil)).Elem()
}

func (i AnalyticsEngineBindingArray) ToAnalyticsEngineBindingArrayOutput() AnalyticsEngineBindingArrayOutput {
	return i.ToAnalyticsEngineBindingArrayOutputWithContext(context.Background())
}

func (i AnalyticsEngineBindingArray) ToAnalyticsEngineBindingArrayOutputWithContext(ctx context.Context) AnalyticsEngineBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsEngineBindingArrayOutput)
}

type AnalyticsEngineBindingOutput struct{ *pulumi.OutputState }

func (AnalyticsEngineBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsEngineBinding)(nil)).Elem()
}

func (o AnalyticsEngineBindingOutput) ToAnalyticsEngineBindingOutput() AnalyticsEngineBindingOutput {
	return o
}

func (o AnalyticsEngineBindingOutput) ToAnalyticsEngineBindingOutputWithContext(ctx context.Context) AnalyticsEngineBindingOutput {
	return o
}

func (o AnalyticsEngineBindingOutput) Dataset() pulumi.StringOutput {
	return o.ApplyT(func(v AnalyticsEngineBinding) string { return v.Dataset }).(pulumi.StringOutput)
}

func (o AnalyticsEngineBindingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AnalyticsEngineBinding) string { return v.Name }).(pulumi.StringOutput)
}

type AnalyticsEngineBindingArrayOutput struct{ *pulumi.OutputState }

func (AnalyticsEngineBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnalyticsEngineBinding)(nil)).Elem()
}

func (o AnalyticsEngineBindingArrayOutput) ToAnalyticsEngineBindingArrayOutput() AnalyticsEngineBindingArrayOutput {
	return o
}

func (o AnalyticsEngineBindingArrayOutput) ToAnalyticsEngineBindingArrayOutputWithContext(ctx context.Context) AnalyticsEngineBindingArrayOutput {
	return o
}

func (o AnalyticsEngineBindingArrayOutput) Index(i pulumi.IntInput) AnalyticsEngineBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AnalyticsEngineBinding {
		return vs[0].([]AnalyticsEngineBinding)[vs[1].(int)]
	}).(AnalyticsEngineBindingOutput)
}

type D1DatabaseBinding struct {
	DatabaseId string `pulumi:"databaseId"`
	Name       string `pulumi:"name"`
}

// D1DatabaseBindingInput is an input type that accepts D1DatabaseBindingArgs and D1DatabaseBindingOutput values.
// You can construct a concrete instance of `D1DatabaseBindingInput` via:
//
//	D1DatabaseBindingArgs{...}
type D1DatabaseBindingInput interface {
	pulumi.Input

	ToD1DatabaseBindingOutput() D1DatabaseBindingOutput
	ToD1DatabaseBindingOutputWithContext(context.Context) D1DatabaseBindingOutput
}

type D1DatabaseBindingArgs struct {
	DatabaseId pulumi.StringInput `pulumi:"databaseId"`
	Name       pulumi.StringInput `pulumi:"name"`
}

func (D1DatabaseBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*D1DatabaseBinding)(nil)).Elem()
}

func (i D1DatabaseBindingArgs) ToD1DatabaseBindingOutput() D1DatabaseBindingOutput {
	return i.ToD1DatabaseBindingOutputWithContext(context.Background())
}

func (i D1DatabaseBindingArgs) ToD1DatabaseBindingOutputWithContext(ctx context.Context) D1DatabaseBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(D1DatabaseBindingOutput)
}

// D1DatabaseBindingArrayInput is an input type that accepts D1DatabaseBindingArray and D1DatabaseBindingArrayOutput values.
// You can construct a concrete instance of `D1DatabaseBindingArrayInput` via:
//
//	D1DatabaseBindingArray{ D1DatabaseBindingArgs{...} }
type D1DatabaseBindingArrayInput interface {
	pulumi.Input

	ToD1DatabaseBindingArrayOutput() D1DatabaseBindingArrayOutput
	ToD1DatabaseBindingArrayOutputWithContext(context.Context) D1DatabaseBindingArrayOutput
}

type D1DatabaseBindingArray []D1DatabaseBindingInput

func (D1DatabaseBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]D1DatabaseBinding)(nil)).Elem()
}

func (i D1DatabaseBindingArray) ToD1DatabaseBindingArrayOutput() D1DatabaseBindingArrayOutput {
	return i.ToD1DatabaseBindingArrayOutputWithContext(context.Background())
}

func (i D1DatabaseBindingArray) ToD1DatabaseBindingArrayOutputWithContext(ctx context.Context) D1DatabaseBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(D1DatabaseBindingArrayOutput)
}

type D1DatabaseBindingOutput struct{ *pulumi.OutputState }

func (D1DatabaseBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*D1DatabaseBinding)(nil)).Elem()
}

func (o D1DatabaseBindingOutput) ToD1DatabaseBindingOutput() D1DatabaseBindingOutput {
	return o
}

func (o D1DatabaseBindingOutput) ToD1DatabaseBindingOutputWithContext(ctx context.Context) D1DatabaseBindingOutput {
	return o
}

func (o D1DatabaseBindingOutput) DatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v D1DatabaseBinding) string { return v.DatabaseId }).(pulumi.StringOutput)
}

func (o D1DatabaseBindingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v D1DatabaseBinding) string { return v.Name }).(pulumi.StringOutput)
}

type D1DatabaseBindingArrayOutput struct{ *pulumi.OutputState }

func (D1DatabaseBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]D1DatabaseBinding)(nil)).Elem()
}

func (o D1DatabaseBindingArrayOutput) ToD1DatabaseBindingArrayOutput() D1DatabaseBindingArrayOutput {
	return o
}

func (o D1DatabaseBindingArrayOutput) ToD1DatabaseBindingArrayOutputWithContext(ctx context.Context) D1DatabaseBindingArrayOutput {
	return o
}

func (o D1DatabaseBindingArrayOutput) Index(i pulumi.IntInput) D1DatabaseBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) D1DatabaseBinding {
		return vs[0].([]D1DatabaseBinding)[vs[1].(int)]
	}).(D1DatabaseBindingOutput)
}

type KVNamespaceBinding struct {
	Name        string `pulumi:"name"`
	NamespaceId string `pulumi:"namespaceId"`
}

// KVNamespaceBindingInput is an input type that accepts KVNamespaceBindingArgs and KVNamespaceBindingOutput values.
// You can construct a concrete instance of `KVNamespaceBindingInput` via:
//
//	KVNamespaceBindingArgs{...}
type KVNamespaceBindingInput interface {
	pulumi.Input

	ToKVNamespaceBindingOutput() KVNamespaceBindingOutput
	ToKVNamespaceBindingOutputWithContext(context.Context) KVNamespaceBindingOutput
}

type KVNamespaceBindingArgs struct {
	Name        pulumi.StringInput `pulumi:"name"`
	NamespaceId pulumi.StringInput `pulumi:"namespaceId"`
}

func (KVNamespaceBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KVNamespaceBinding)(nil)).Elem()
}

func (i KVNamespaceBindingArgs) ToKVNamespaceBindingOutput() KVNamespaceBindingOutput {
	return i.ToKVNamespaceBindingOutputWithContext(context.Background())
}

func (i KVNamespaceBindingArgs) ToKVNamespaceBindingOutputWithContext(ctx context.Context) KVNamespaceBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KVNamespaceBindingOutput)
}

// KVNamespaceBindingArrayInput is an input type that accepts KVNamespaceBindingArray and KVNamespaceBindingArrayOutput values.
// You can construct a concrete instance of `KVNamespaceBindingArrayInput` via:
//
//	KVNamespaceBindingArray{ KVNamespaceBindingArgs{...} }
type KVNamespaceBindingArrayInput interface {
	pulumi.Input

	ToKVNamespaceBindingArrayOutput() KVNamespaceBindingArrayOutput
	ToKVNamespaceBindingArrayOutputWithContext(context.Context) KVNamespaceBindingArrayOutput
}

type KVNamespaceBindingArray []KVNamespaceBindingInput

func (KVNamespaceBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KVNamespaceBinding)(nil)).Elem()
}

func (i KVNamespaceBindingArray) ToKVNamespaceBindingArrayOutput() KVNamespaceBindingArrayOutput {
	return i.ToKVNamespaceBindingArrayOutputWithContext(context.Background())
}

func (i KVNamespaceBindingArray) ToKVNamespaceBindingArrayOutputWithContext(ctx context.Context) KVNamespaceBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KVNamespaceBindingArrayOutput)
}

type KVNamespaceBindingOutput struct{ *pulumi.OutputState }

func (KVNamespaceBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KVNamespaceBinding)(nil)).Elem()
}

func (o KVNamespaceBindingOutput) ToKVNamespaceBindingOutput() KVNamespaceBindingOutput {
	return o
}

func (o KVNamespaceBindingOutput) ToKVNamespaceBindingOutputWithContext(ctx context.Context) KVNamespaceBindingOutput {
	return o
}

func (o KVNamespaceBindingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v KVNamespaceBinding) string { return v.Name }).(pulumi.StringOutput)
}

func (o KVNamespaceBindingOutput) NamespaceId() pulumi.StringOutput {
	return o.ApplyT(func(v KVNamespaceBinding) string { return v.NamespaceId }).(pulumi.StringOutput)
}

type KVNamespaceBindingArrayOutput struct{ *pulumi.OutputState }

func (KVNamespaceBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KVNamespaceBinding)(nil)).Elem()
}

func (o KVNamespaceBindingArrayOutput) ToKVNamespaceBindingArrayOutput() KVNamespaceBindingArrayOutput {
	return o
}

func (o KVNamespaceBindingArrayOutput) ToKVNamespaceBindingArrayOutputWithContext(ctx context.Context) KVNamespaceBindingArrayOutput {
	return o
}

func (o KVNamespaceBindingArrayOutput) Index(i pulumi.IntInput) KVNamespaceBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KVNamespaceBinding {
		return vs[0].([]KVNamespaceBinding)[vs[1].(int)]
	}).(KVNamespaceBindingOutput)
}

type PlainTextBinding struct {
	Name string `pulumi:"name"`
	Text string `pulumi:"text"`
}

// PlainTextBindingInput is an input type that accepts PlainTextBindingArgs and PlainTextBindingOutput values.
// You can construct a concrete instance of `PlainTextBindingInput` via:
//
//	PlainTextBindingArgs{...}
type PlainTextBindingInput interface {
	pulumi.Input

	ToPlainTextBindingOutput() PlainTextBindingOutput
	ToPlainTextBindingOutputWithContext(context.Context) PlainTextBindingOutput
}

type PlainTextBindingArgs struct {
	Name pulumi.StringInput `pulumi:"name"`
	Text pulumi.StringInput `pulumi:"text"`
}

func (PlainTextBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlainTextBinding)(nil)).Elem()
}

func (i PlainTextBindingArgs) ToPlainTextBindingOutput() PlainTextBindingOutput {
	return i.ToPlainTextBindingOutputWithContext(context.Background())
}

func (i PlainTextBindingArgs) ToPlainTextBindingOutputWithContext(ctx context.Context) PlainTextBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlainTextBindingOutput)
}

// PlainTextBindingArrayInput is an input type that accepts PlainTextBindingArray and PlainTextBindingArrayOutput values.
// You can construct a concrete instance of `PlainTextBindingArrayInput` via:
//
//	PlainTextBindingArray{ PlainTextBindingArgs{...} }
type PlainTextBindingArrayInput interface {
	pulumi.Input

	ToPlainTextBindingArrayOutput() PlainTextBindingArrayOutput
	ToPlainTextBindingArrayOutputWithContext(context.Context) PlainTextBindingArrayOutput
}

type PlainTextBindingArray []PlainTextBindingInput

func (PlainTextBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlainTextBinding)(nil)).Elem()
}

func (i PlainTextBindingArray) ToPlainTextBindingArrayOutput() PlainTextBindingArrayOutput {
	return i.ToPlainTextBindingArrayOutputWithContext(context.Background())
}

func (i PlainTextBindingArray) ToPlainTextBindingArrayOutputWithContext(ctx context.Context) PlainTextBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlainTextBindingArrayOutput)
}

type PlainTextBindingOutput struct{ *pulumi.OutputState }

func (PlainTextBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlainTextBinding)(nil)).Elem()
}

func (o PlainTextBindingOutput) ToPlainTextBindingOutput() PlainTextBindingOutput {
	return o
}

func (o PlainTextBindingOutput) ToPlainTextBindingOutputWithContext(ctx context.Context) PlainTextBindingOutput {
	return o
}

func (o PlainTextBindingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PlainTextBinding) string { return v.Name }).(pulumi.StringOutput)
}

func (o PlainTextBindingOutput) Text() pulumi.StringOutput {
	return o.ApplyT(func(v PlainTextBinding) string { return v.Text }).(pulumi.StringOutput)
}

type PlainTextBindingArrayOutput struct{ *pulumi.OutputState }

func (PlainTextBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlainTextBinding)(nil)).Elem()
}

func (o PlainTextBindingArrayOutput) ToPlainTextBindingArrayOutput() PlainTextBindingArrayOutput {
	return o
}

func (o PlainTextBindingArrayOutput) ToPlainTextBindingArrayOutputWithContext(ctx context.Context) PlainTextBindingArrayOutput {
	return o
}

func (o PlainTextBindingArrayOutput) Index(i pulumi.IntInput) PlainTextBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PlainTextBinding {
		return vs[0].([]PlainTextBinding)[vs[1].(int)]
	}).(PlainTextBindingOutput)
}

type QueueBinding struct {
	Name      string `pulumi:"name"`
	QueueName string `pulumi:"queueName"`
}

// QueueBindingInput is an input type that accepts QueueBindingArgs and QueueBindingOutput values.
// You can construct a concrete instance of `QueueBindingInput` via:
//
//	QueueBindingArgs{...}
type QueueBindingInput interface {
	pulumi.Input

	ToQueueBindingOutput() QueueBindingOutput
	ToQueueBindingOutputWithContext(context.Context) QueueBindingOutput
}

type QueueBindingArgs struct {
	Name      pulumi.StringInput `pulumi:"name"`
	QueueName pulumi.StringInput `pulumi:"queueName"`
}

func (QueueBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueueBinding)(nil)).Elem()
}

func (i QueueBindingArgs) ToQueueBindingOutput() QueueBindingOutput {
	return i.ToQueueBindingOutputWithContext(context.Background())
}

func (i QueueBindingArgs) ToQueueBindingOutputWithContext(ctx context.Context) QueueBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueBindingOutput)
}

// QueueBindingArrayInput is an input type that accepts QueueBindingArray and QueueBindingArrayOutput values.
// You can construct a concrete instance of `QueueBindingArrayInput` via:
//
//	QueueBindingArray{ QueueBindingArgs{...} }
type QueueBindingArrayInput interface {
	pulumi.Input

	ToQueueBindingArrayOutput() QueueBindingArrayOutput
	ToQueueBindingArrayOutputWithContext(context.Context) QueueBindingArrayOutput
}

type QueueBindingArray []QueueBindingInput

func (QueueBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QueueBinding)(nil)).Elem()
}

func (i QueueBindingArray) ToQueueBindingArrayOutput() QueueBindingArrayOutput {
	return i.ToQueueBindingArrayOutputWithContext(context.Background())
}

func (i QueueBindingArray) ToQueueBindingArrayOutputWithContext(ctx context.Context) QueueBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueBindingArrayOutput)
}

type QueueBindingOutput struct{ *pulumi.OutputState }

func (QueueBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueueBinding)(nil)).Elem()
}

func (o QueueBindingOutput) ToQueueBindingOutput() QueueBindingOutput {
	return o
}

func (o QueueBindingOutput) ToQueueBindingOutputWithContext(ctx context.Context) QueueBindingOutput {
	return o
}

func (o QueueBindingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v QueueBinding) string { return v.Name }).(pulumi.StringOutput)
}

func (o QueueBindingOutput) QueueName() pulumi.StringOutput {
	return o.ApplyT(func(v QueueBinding) string { return v.QueueName }).(pulumi.StringOutput)
}

type QueueBindingArrayOutput struct{ *pulumi.OutputState }

func (QueueBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QueueBinding)(nil)).Elem()
}

func (o QueueBindingArrayOutput) ToQueueBindingArrayOutput() QueueBindingArrayOutput {
	return o
}

func (o QueueBindingArrayOutput) ToQueueBindingArrayOutputWithContext(ctx context.Context) QueueBindingArrayOutput {
	return o
}

func (o QueueBindingArrayOutput) Index(i pulumi.IntInput) QueueBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) QueueBinding {
		return vs[0].([]QueueBinding)[vs[1].(int)]
	}).(QueueBindingOutput)
}

type R2BucketBinding struct {
	BucketName string `pulumi:"bucketName"`
	Name       string `pulumi:"name"`
}

// R2BucketBindingInput is an input type that accepts R2BucketBindingArgs and R2BucketBindingOutput values.
// You can construct a concrete instance of `R2BucketBindingInput` via:
//
//	R2BucketBindingArgs{...}
type R2BucketBindingInput interface {
	pulumi.Input

	ToR2BucketBindingOutput() R2BucketBindingOutput
	ToR2BucketBindingOutputWithContext(context.Context) R2BucketBindingOutput
}

type R2BucketBindingArgs struct {
	BucketName pulumi.StringInput `pulumi:"bucketName"`
	Name       pulumi.StringInput `pulumi:"name"`
}

func (R2BucketBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*R2BucketBinding)(nil)).Elem()
}

func (i R2BucketBindingArgs) ToR2BucketBindingOutput() R2BucketBindingOutput {
	return i.ToR2BucketBindingOutputWithContext(context.Background())
}

func (i R2BucketBindingArgs) ToR2BucketBindingOutputWithContext(ctx context.Context) R2BucketBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(R2BucketBindingOutput)
}

// R2BucketBindingArrayInput is an input type that accepts R2BucketBindingArray and R2BucketBindingArrayOutput values.
// You can construct a concrete instance of `R2BucketBindingArrayInput` via:
//
//	R2BucketBindingArray{ R2BucketBindingArgs{...} }
type R2BucketBindingArrayInput interface {
	pulumi.Input

	ToR2BucketBindingArrayOutput() R2BucketBindingArrayOutput
	ToR2BucketBindingArrayOutputWithContext(context.Context) R2BucketBindingArrayOutput
}

type R2BucketBindingArray []R2BucketBindingInput

func (R2BucketBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]R2BucketBinding)(nil)).Elem()
}

func (i R2BucketBindingArray) ToR2BucketBindingArrayOutput() R2BucketBindingArrayOutput {
	return i.ToR2BucketBindingArrayOutputWithContext(context.Background())
}

func (i R2BucketBindingArray) ToR2BucketBindingArrayOutputWithContext(ctx context.Context) R2BucketBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(R2BucketBindingArrayOutput)
}

type R2BucketBindingOutput struct{ *pulumi.OutputState }

func (R2BucketBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*R2BucketBinding)(nil)).Elem()
}

func (o R2BucketBindingOutput) ToR2BucketBindingOutput() R2BucketBindingOutput {
	return o
}

func (o R2BucketBindingOutput) ToR2BucketBindingOutputWithContext(ctx context.Context) R2BucketBindingOutput {
	return o
}

func (o R2BucketBindingOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v R2BucketBinding) string { return v.BucketName }).(pulumi.StringOutput)
}

func (o R2BucketBindingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v R2BucketBinding) string { return v.Name }).(pulumi.StringOutput)
}

type R2BucketBindingArrayOutput struct{ *pulumi.OutputState }

func (R2BucketBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]R2BucketBinding)(nil)).Elem()
}

func (o R2BucketBindingArrayOutput) ToR2BucketBindingArrayOutput() R2BucketBindingArrayOutput {
	return o
}

func (o R2BucketBindingArrayOutput) ToR2BucketBindingArrayOutputWithContext(ctx context.Context) R2BucketBindingArrayOutput {
	return o
}

func (o R2BucketBindingArrayOutput) Index(i pulumi.IntInput) R2BucketBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) R2BucketBinding {
		return vs[0].([]R2BucketBinding)[vs[1].(int)]
	}).(R2BucketBindingOutput)
}

type SecretTextBinding struct {
	Name string `pulumi:"name"`
	Text string `pulumi:"text"`
}

// SecretTextBindingInput is an input type that accepts SecretTextBindingArgs and SecretTextBindingOutput values.
// You can construct a concrete instance of `SecretTextBindingInput` via:
//
//	SecretTextBindingArgs{...}
type SecretTextBindingInput interface {
	pulumi.Input

	ToSecretTextBindingOutput() SecretTextBindingOutput
	ToSecretTextBindingOutputWithContext(context.Context) SecretTextBindingOutput
}

type SecretTextBindingArgs struct {
	Name pulumi.StringInput `pulumi:"name"`
	Text pulumi.StringInput `pulumi:"text"`
}

func (SecretTextBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretTextBinding)(nil)).Elem()
}

func (i SecretTextBindingArgs) ToSecretTextBindingOutput() SecretTextBindingOutput {
	return i.ToSecretTextBindingOutputWithContext(context.Background())
}

func (i SecretTextBindingArgs) ToSecretTextBindingOutputWithContext(ctx context.Context) SecretTextBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretTextBindingOutput)
}

// SecretTextBindingArrayInput is an input type that accepts SecretTextBindingArray and SecretTextBindingArrayOutput values.
// You can construct a concrete instance of `SecretTextBindingArrayInput` via:
//
//	SecretTextBindingArray{ SecretTextBindingArgs{...} }
type SecretTextBindingArrayInput interface {
	pulumi.Input

	ToSecretTextBindingArrayOutput() SecretTextBindingArrayOutput
	ToSecretTextBindingArrayOutputWithContext(context.Context) SecretTextBindingArrayOutput
}

type SecretTextBindingArray []SecretTextBindingInput

func (SecretTextBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretTextBinding)(nil)).Elem()
}

func (i SecretTextBindingArray) ToSecretTextBindingArrayOutput() SecretTextBindingArrayOutput {
	return i.ToSecretTextBindingArrayOutputWithContext(context.Background())
}

func (i SecretTextBindingArray) ToSecretTextBindingArrayOutputWithContext(ctx context.Context) SecretTextBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretTextBindingArrayOutput)
}

type SecretTextBindingOutput struct{ *pulumi.OutputState }

func (SecretTextBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretTextBinding)(nil)).Elem()
}

func (o SecretTextBindingOutput) ToSecretTextBindingOutput() SecretTextBindingOutput {
	return o
}

func (o SecretTextBindingOutput) ToSecretTextBindingOutputWithContext(ctx context.Context) SecretTextBindingOutput {
	return o
}

func (o SecretTextBindingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SecretTextBinding) string { return v.Name }).(pulumi.StringOutput)
}

func (o SecretTextBindingOutput) Text() pulumi.StringOutput {
	return o.ApplyT(func(v SecretTextBinding) string { return v.Text }).(pulumi.StringOutput)
}

type SecretTextBindingArrayOutput struct{ *pulumi.OutputState }

func (SecretTextBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretTextBinding)(nil)).Elem()
}

func (o SecretTextBindingArrayOutput) ToSecretTextBindingArrayOutput() SecretTextBindingArrayOutput {
	return o
}

func (o SecretTextBindingArrayOutput) ToSecretTextBindingArrayOutputWithContext(ctx context.Context) SecretTextBindingArrayOutput {
	return o
}

func (o SecretTextBindingArrayOutput) Index(i pulumi.IntInput) SecretTextBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecretTextBinding {
		return vs[0].([]SecretTextBinding)[vs[1].(int)]
	}).(SecretTextBindingOutput)
}

type ServiceBinding struct {
	Name    string `pulumi:"name"`
	Service string `pulumi:"service"`
}

// ServiceBindingInput is an input type that accepts ServiceBindingArgs and ServiceBindingOutput values.
// You can construct a concrete instance of `ServiceBindingInput` via:
//
//	ServiceBindingArgs{...}
type ServiceBindingInput interface {
	pulumi.Input

	ToServiceBindingOutput() ServiceBindingOutput
	ToServiceBindingOutputWithContext(context.Context) ServiceBindingOutput
}

type ServiceBindingArgs struct {
	Name    pulumi.StringInput `pulumi:"name"`
	Service pulumi.StringInput `pulumi:"service"`
}

func (ServiceBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceBinding)(nil)).Elem()
}

func (i ServiceBindingArgs) ToServiceBindingOutput() ServiceBindingOutput {
	return i.ToServiceBindingOutputWithContext(context.Background())
}

func (i ServiceBindingArgs) ToServiceBindingOutputWithContext(ctx context.Context) ServiceBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceBindingOutput)
}

// ServiceBindingArrayInput is an input type that accepts ServiceBindingArray and ServiceBindingArrayOutput values.
// You can construct a concrete instance of `ServiceBindingArrayInput` via:
//
//	ServiceBindingArray{ ServiceBindingArgs{...} }
type ServiceBindingArrayInput interface {
	pulumi.Input

	ToServiceBindingArrayOutput() ServiceBindingArrayOutput
	ToServiceBindingArrayOutputWithContext(context.Context) ServiceBindingArrayOutput
}

type ServiceBindingArray []ServiceBindingInput

func (ServiceBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceBinding)(nil)).Elem()
}

func (i ServiceBindingArray) ToServiceBindingArrayOutput() ServiceBindingArrayOutput {
	return i.ToServiceBindingArrayOutputWithContext(context.Background())
}

func (i ServiceBindingArray) ToServiceBindingArrayOutputWithContext(ctx context.Context) ServiceBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceBindingArrayOutput)
}

type ServiceBindingOutput struct{ *pulumi.OutputState }

func (ServiceBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceBinding)(nil)).Elem()
}

func (o ServiceBindingOutput) ToServiceBindingOutput() ServiceBindingOutput {
	return o
}

func (o ServiceBindingOutput) ToServiceBindingOutputWithContext(ctx context.Context) ServiceBindingOutput {
	return o
}

func (o ServiceBindingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceBinding) string { return v.Name }).(pulumi.StringOutput)
}

func (o ServiceBindingOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceBinding) string { return v.Service }).(pulumi.StringOutput)
}

type ServiceBindingArrayOutput struct{ *pulumi.OutputState }

func (ServiceBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceBinding)(nil)).Elem()
}

func (o ServiceBindingArrayOutput) ToServiceBindingArrayOutput() ServiceBindingArrayOutput {
	return o
}

func (o ServiceBindingArrayOutput) ToServiceBindingArrayOutputWithContext(ctx context.Context) ServiceBindingArrayOutput {
	return o
}

func (o ServiceBindingArrayOutput) Index(i pulumi.IntInput) ServiceBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceBinding {
		return vs[0].([]ServiceBinding)[vs[1].(int)]
	}).(ServiceBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AnalyticsEngineBindingInput)(nil)).Elem(), AnalyticsEngineBindingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnalyticsEngineBindingArrayInput)(nil)).Elem(), AnalyticsEngineBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*D1DatabaseBindingInput)(nil)).Elem(), D1DatabaseBindingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*D1DatabaseBindingArrayInput)(nil)).Elem(), D1DatabaseBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KVNamespaceBindingInput)(nil)).Elem(), KVNamespaceBindingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KVNamespaceBindingArrayInput)(nil)).Elem(), KVNamespaceBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlainTextBindingInput)(nil)).Elem(), PlainTextBindingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlainTextBindingArrayInput)(nil)).Elem(), PlainTextBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueueBindingInput)(nil)).Elem(), QueueBindingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueueBindingArrayInput)(nil)).Elem(), QueueBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*R2BucketBindingInput)(nil)).Elem(), R2BucketBindingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*R2BucketBindingArrayInput)(nil)).Elem(), R2BucketBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretTextBindingInput)(nil)).Elem(), SecretTextBindingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretTextBindingArrayInput)(nil)).Elem(), SecretTextBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceBindingInput)(nil)).Elem(), ServiceBindingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceBindingArrayInput)(nil)).Elem(), ServiceBindingArray{})
	pulumi.RegisterOutputType(AnalyticsEngineBindingOutput{})
	pulumi.RegisterOutputType(AnalyticsEngineBindingArrayOutput{})
	pulumi.RegisterOutputType(D1DatabaseBindingOutput{})
	pulumi.RegisterOutputType(D1DatabaseBindingArrayOutput{})
	pulumi.RegisterOutputType(KVNamespaceBindingOutput{})
	pulumi.RegisterOutputType(KVNamespaceBindingArrayOutput{})
	pulumi.RegisterOutputType(PlainTextBindingOutput{})
	pulumi.RegisterOutputType(PlainTextBindingArrayOutput{})
	pulumi.RegisterOutputType(QueueBindingOutput{})
	pulumi.RegisterOutputType(QueueBindingArrayOutput{})
	pulumi.RegisterOutputType(R2BucketBindingOutput{})
	pulumi.RegisterOutputType(R2BucketBindingArrayOutput{})
	pulumi.RegisterOutputType(SecretTextBindingOutput{})
	pulumi.RegisterOutputType(SecretTextBindingArrayOutput{})
	pulumi.RegisterOutputType(ServiceBindingOutput{})
	pulumi.RegisterOutputType(ServiceBindingArrayOutput{})
}
