# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ModuleWorkerScriptArgs', 'ModuleWorkerScript']

@pulumi.input_type
class ModuleWorkerScriptArgs:
    def __init__(__self__, *,
                 account_id: pulumi.Input[str],
                 dir: pulumi.Input[str],
                 main_module: pulumi.Input[str],
                 name: pulumi.Input[str],
                 analytics_engine_bindings: Optional[pulumi.Input[Sequence[pulumi.Input['AnalyticsEngineBindingArgs']]]] = None,
                 compatibility_date: Optional[pulumi.Input[str]] = None,
                 compatibility_flags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 d1_database_bindings: Optional[pulumi.Input[Sequence[pulumi.Input['D1DatabaseBindingArgs']]]] = None,
                 kv_namespace_bindings: Optional[pulumi.Input[Sequence[pulumi.Input['KVNamespaceBindingArgs']]]] = None,
                 logpush: Optional[pulumi.Input[bool]] = None,
                 plain_text_bindings: Optional[pulumi.Input[Sequence[pulumi.Input['PlainTextBindingArgs']]]] = None,
                 queue_bindings: Optional[pulumi.Input[Sequence[pulumi.Input['QueueBindingArgs']]]] = None,
                 r2_bucket_bindings: Optional[pulumi.Input[Sequence[pulumi.Input['R2BucketBindingArgs']]]] = None,
                 secret_text_bindings: Optional[pulumi.Input[Sequence[pulumi.Input['SecretTextBindingArgs']]]] = None,
                 service_bindings: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceBindingArgs']]]] = None):
        """
        The set of arguments for constructing a ModuleWorkerScript resource.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "dir", dir)
        pulumi.set(__self__, "main_module", main_module)
        pulumi.set(__self__, "name", name)
        if analytics_engine_bindings is not None:
            pulumi.set(__self__, "analytics_engine_bindings", analytics_engine_bindings)
        if compatibility_date is not None:
            pulumi.set(__self__, "compatibility_date", compatibility_date)
        if compatibility_flags is not None:
            pulumi.set(__self__, "compatibility_flags", compatibility_flags)
        if d1_database_bindings is not None:
            pulumi.set(__self__, "d1_database_bindings", d1_database_bindings)
        if kv_namespace_bindings is not None:
            pulumi.set(__self__, "kv_namespace_bindings", kv_namespace_bindings)
        if logpush is not None:
            pulumi.set(__self__, "logpush", logpush)
        if plain_text_bindings is not None:
            pulumi.set(__self__, "plain_text_bindings", plain_text_bindings)
        if queue_bindings is not None:
            pulumi.set(__self__, "queue_bindings", queue_bindings)
        if r2_bucket_bindings is not None:
            pulumi.set(__self__, "r2_bucket_bindings", r2_bucket_bindings)
        if secret_text_bindings is not None:
            pulumi.set(__self__, "secret_text_bindings", secret_text_bindings)
        if service_bindings is not None:
            pulumi.set(__self__, "service_bindings", service_bindings)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter
    def dir(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dir")

    @dir.setter
    def dir(self, value: pulumi.Input[str]):
        pulumi.set(self, "dir", value)

    @property
    @pulumi.getter(name="mainModule")
    def main_module(self) -> pulumi.Input[str]:
        return pulumi.get(self, "main_module")

    @main_module.setter
    def main_module(self, value: pulumi.Input[str]):
        pulumi.set(self, "main_module", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="analyticsEngineBindings")
    def analytics_engine_bindings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalyticsEngineBindingArgs']]]]:
        return pulumi.get(self, "analytics_engine_bindings")

    @analytics_engine_bindings.setter
    def analytics_engine_bindings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalyticsEngineBindingArgs']]]]):
        pulumi.set(self, "analytics_engine_bindings", value)

    @property
    @pulumi.getter(name="compatibilityDate")
    def compatibility_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compatibility_date")

    @compatibility_date.setter
    def compatibility_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compatibility_date", value)

    @property
    @pulumi.getter(name="compatibilityFlags")
    def compatibility_flags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "compatibility_flags")

    @compatibility_flags.setter
    def compatibility_flags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "compatibility_flags", value)

    @property
    @pulumi.getter(name="d1DatabaseBindings")
    def d1_database_bindings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['D1DatabaseBindingArgs']]]]:
        return pulumi.get(self, "d1_database_bindings")

    @d1_database_bindings.setter
    def d1_database_bindings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['D1DatabaseBindingArgs']]]]):
        pulumi.set(self, "d1_database_bindings", value)

    @property
    @pulumi.getter(name="kvNamespaceBindings")
    def kv_namespace_bindings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KVNamespaceBindingArgs']]]]:
        return pulumi.get(self, "kv_namespace_bindings")

    @kv_namespace_bindings.setter
    def kv_namespace_bindings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KVNamespaceBindingArgs']]]]):
        pulumi.set(self, "kv_namespace_bindings", value)

    @property
    @pulumi.getter
    def logpush(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "logpush")

    @logpush.setter
    def logpush(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "logpush", value)

    @property
    @pulumi.getter(name="plainTextBindings")
    def plain_text_bindings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PlainTextBindingArgs']]]]:
        return pulumi.get(self, "plain_text_bindings")

    @plain_text_bindings.setter
    def plain_text_bindings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PlainTextBindingArgs']]]]):
        pulumi.set(self, "plain_text_bindings", value)

    @property
    @pulumi.getter(name="queueBindings")
    def queue_bindings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['QueueBindingArgs']]]]:
        return pulumi.get(self, "queue_bindings")

    @queue_bindings.setter
    def queue_bindings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['QueueBindingArgs']]]]):
        pulumi.set(self, "queue_bindings", value)

    @property
    @pulumi.getter(name="r2BucketBindings")
    def r2_bucket_bindings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['R2BucketBindingArgs']]]]:
        return pulumi.get(self, "r2_bucket_bindings")

    @r2_bucket_bindings.setter
    def r2_bucket_bindings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['R2BucketBindingArgs']]]]):
        pulumi.set(self, "r2_bucket_bindings", value)

    @property
    @pulumi.getter(name="secretTextBindings")
    def secret_text_bindings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SecretTextBindingArgs']]]]:
        return pulumi.get(self, "secret_text_bindings")

    @secret_text_bindings.setter
    def secret_text_bindings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SecretTextBindingArgs']]]]):
        pulumi.set(self, "secret_text_bindings", value)

    @property
    @pulumi.getter(name="serviceBindings")
    def service_bindings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceBindingArgs']]]]:
        return pulumi.get(self, "service_bindings")

    @service_bindings.setter
    def service_bindings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceBindingArgs']]]]):
        pulumi.set(self, "service_bindings", value)


class ModuleWorkerScript(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 analytics_engine_bindings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AnalyticsEngineBindingArgs']]]]] = None,
                 compatibility_date: Optional[pulumi.Input[str]] = None,
                 compatibility_flags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 d1_database_bindings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['D1DatabaseBindingArgs']]]]] = None,
                 dir: Optional[pulumi.Input[str]] = None,
                 kv_namespace_bindings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['KVNamespaceBindingArgs']]]]] = None,
                 logpush: Optional[pulumi.Input[bool]] = None,
                 main_module: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 plain_text_bindings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PlainTextBindingArgs']]]]] = None,
                 queue_bindings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['QueueBindingArgs']]]]] = None,
                 r2_bucket_bindings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['R2BucketBindingArgs']]]]] = None,
                 secret_text_bindings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SecretTextBindingArgs']]]]] = None,
                 service_bindings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceBindingArgs']]]]] = None,
                 __props__=None):
        """
        Create a ModuleWorkerScript resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ModuleWorkerScriptArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ModuleWorkerScript resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ModuleWorkerScriptArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ModuleWorkerScriptArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 analytics_engine_bindings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AnalyticsEngineBindingArgs']]]]] = None,
                 compatibility_date: Optional[pulumi.Input[str]] = None,
                 compatibility_flags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 d1_database_bindings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['D1DatabaseBindingArgs']]]]] = None,
                 dir: Optional[pulumi.Input[str]] = None,
                 kv_namespace_bindings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['KVNamespaceBindingArgs']]]]] = None,
                 logpush: Optional[pulumi.Input[bool]] = None,
                 main_module: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 plain_text_bindings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PlainTextBindingArgs']]]]] = None,
                 queue_bindings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['QueueBindingArgs']]]]] = None,
                 r2_bucket_bindings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['R2BucketBindingArgs']]]]] = None,
                 secret_text_bindings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SecretTextBindingArgs']]]]] = None,
                 service_bindings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceBindingArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ModuleWorkerScriptArgs.__new__(ModuleWorkerScriptArgs)

            if account_id is None and not opts.urn:
                raise TypeError("Missing required property 'account_id'")
            __props__.__dict__["account_id"] = account_id
            __props__.__dict__["analytics_engine_bindings"] = analytics_engine_bindings
            __props__.__dict__["compatibility_date"] = compatibility_date
            __props__.__dict__["compatibility_flags"] = compatibility_flags
            __props__.__dict__["d1_database_bindings"] = d1_database_bindings
            if dir is None and not opts.urn:
                raise TypeError("Missing required property 'dir'")
            __props__.__dict__["dir"] = dir
            __props__.__dict__["kv_namespace_bindings"] = kv_namespace_bindings
            __props__.__dict__["logpush"] = logpush
            if main_module is None and not opts.urn:
                raise TypeError("Missing required property 'main_module'")
            __props__.__dict__["main_module"] = main_module
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
            __props__.__dict__["plain_text_bindings"] = plain_text_bindings
            __props__.__dict__["queue_bindings"] = queue_bindings
            __props__.__dict__["r2_bucket_bindings"] = r2_bucket_bindings
            __props__.__dict__["secret_text_bindings"] = secret_text_bindings
            __props__.__dict__["service_bindings"] = service_bindings
            __props__.__dict__["e_tag"] = None
        super(ModuleWorkerScript, __self__).__init__(
            'cr:index:ModuleWorkerScript',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'ModuleWorkerScript':
        """
        Get an existing ModuleWorkerScript resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = ModuleWorkerScriptArgs.__new__(ModuleWorkerScriptArgs)

        __props__.__dict__["account_id"] = None
        __props__.__dict__["analytics_engine_bindings"] = None
        __props__.__dict__["compatibility_date"] = None
        __props__.__dict__["compatibility_flags"] = None
        __props__.__dict__["d1_database_bindings"] = None
        __props__.__dict__["dir"] = None
        __props__.__dict__["e_tag"] = None
        __props__.__dict__["kv_namespace_bindings"] = None
        __props__.__dict__["logpush"] = None
        __props__.__dict__["main_module"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["plain_text_bindings"] = None
        __props__.__dict__["queue_bindings"] = None
        __props__.__dict__["r2_bucket_bindings"] = None
        __props__.__dict__["secret_text_bindings"] = None
        __props__.__dict__["service_bindings"] = None
        return ModuleWorkerScript(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="analyticsEngineBindings")
    def analytics_engine_bindings(self) -> pulumi.Output[Optional[Sequence['outputs.AnalyticsEngineBinding']]]:
        return pulumi.get(self, "analytics_engine_bindings")

    @property
    @pulumi.getter(name="compatibilityDate")
    def compatibility_date(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "compatibility_date")

    @property
    @pulumi.getter(name="compatibilityFlags")
    def compatibility_flags(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "compatibility_flags")

    @property
    @pulumi.getter(name="d1DatabaseBindings")
    def d1_database_bindings(self) -> pulumi.Output[Optional[Sequence['outputs.D1DatabaseBinding']]]:
        return pulumi.get(self, "d1_database_bindings")

    @property
    @pulumi.getter
    def dir(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dir")

    @property
    @pulumi.getter(name="eTag")
    def e_tag(self) -> pulumi.Output[str]:
        return pulumi.get(self, "e_tag")

    @property
    @pulumi.getter(name="kvNamespaceBindings")
    def kv_namespace_bindings(self) -> pulumi.Output[Optional[Sequence['outputs.KVNamespaceBinding']]]:
        return pulumi.get(self, "kv_namespace_bindings")

    @property
    @pulumi.getter
    def logpush(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "logpush")

    @property
    @pulumi.getter(name="mainModule")
    def main_module(self) -> pulumi.Output[str]:
        return pulumi.get(self, "main_module")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="plainTextBindings")
    def plain_text_bindings(self) -> pulumi.Output[Optional[Sequence['outputs.PlainTextBinding']]]:
        return pulumi.get(self, "plain_text_bindings")

    @property
    @pulumi.getter(name="queueBindings")
    def queue_bindings(self) -> pulumi.Output[Optional[Sequence['outputs.QueueBinding']]]:
        return pulumi.get(self, "queue_bindings")

    @property
    @pulumi.getter(name="r2BucketBindings")
    def r2_bucket_bindings(self) -> pulumi.Output[Optional[Sequence['outputs.R2BucketBinding']]]:
        return pulumi.get(self, "r2_bucket_bindings")

    @property
    @pulumi.getter(name="secretTextBindings")
    def secret_text_bindings(self) -> pulumi.Output[Optional[Sequence['outputs.SecretTextBinding']]]:
        return pulumi.get(self, "secret_text_bindings")

    @property
    @pulumi.getter(name="serviceBindings")
    def service_bindings(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceBinding']]]:
        return pulumi.get(self, "service_bindings")

